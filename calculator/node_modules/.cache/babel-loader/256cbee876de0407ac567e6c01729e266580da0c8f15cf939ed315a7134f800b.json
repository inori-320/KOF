{"ast":null,"code":"import ACTIONS from \"./actions\";\nconst evaluate = state => {\n  let {\n    a,\n    ope,\n    b\n  } = state;\n  a = parseFloat(a);\n  b = parseFloat(b);\n  let ans = \"\";\n  switch (ope) {\n    case \"+\":\n      ans = a + b;\n    case \"-\":\n      ans = a - b;\n    case \"×\":\n      ans = a * b;\n    case \"÷\":\n      if (b === 0) {\n        ans = 0;\n      }\n      ans = parseFloat(a / b);\n  }\n  return ans.toString();\n};\nconst reducer = (state = {\n  currentOperand: \"0\",\n  lastOperand: \"\",\n  operation: \"\"\n}, action) => {\n  switch (action.type) {\n    case ACTIONS.ADD_DIGIT:\n      if (state.currentOperand === \"0\" && action.digit !== \".\") {\n        return {\n          ...state,\n          currentOperand: action.digit\n        };\n      }\n      if (action.digit === '.' && state.currentOperand.includes('.')) {\n        return state;\n      }\n      if (action.digit === '.' && state.currentOperand === \"\") {\n        return {\n          ...state,\n          currentOperand: \"0\" + action.digit\n        };\n      }\n      return {\n        ...state,\n        currentOperand: state.currentOperand + action.digit\n      };\n    case ACTIONS.DELETE_DIGIT:\n      if (state.currentOperand === \"\") {\n        return state;\n      }\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1)\n      };\n    case ACTIONS.CHOOSE_OPERATION:\n      if (state.lastOperand === \"\" && state.currentOperand === \"\") {\n        return state;\n      }\n      if (state.lastOperand === \"\") {\n        return {\n          ...state,\n          lastOperand: state.currentOperand,\n          operation: action.operation,\n          currentOperand: \"\"\n        };\n      }\n      if (state.currentOperand === \"\") {\n        return {\n          ...state,\n          operation: action.operation\n        };\n      }\n      return {\n        ...state,\n        lastOperand: evalute(state),\n        operation: action.operation,\n        currentOperand: \"\"\n      };\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["ACTIONS","evaluate","state","a","ope","b","parseFloat","ans","toString","reducer","currentOperand","lastOperand","operation","action","type","ADD_DIGIT","digit","includes","DELETE_DIGIT","slice","CHOOSE_OPERATION","evalute"],"sources":["E:/practice/Web class/React practice/calculator/src/redux/reducer.js"],"sourcesContent":["import ACTIONS from \"./actions\";\r\n\r\nconst evaluate = (state) => {\r\n    let {a, ope, b} = state;\r\n    a = parseFloat(a);\r\n    b = parseFloat(b);\r\n    let ans = \"\";\r\n    switch(ope){\r\n        case \"+\":\r\n            ans = a + b;\r\n        case \"-\":\r\n            ans = a - b;\r\n        case \"×\":\r\n            ans = a * b;\r\n        case \"÷\":\r\n            if (b === 0){\r\n                ans = 0;\r\n            }\r\n            ans = parseFloat(a / b)\r\n    }\r\n    return ans.toString();\r\n}\r\n\r\nconst reducer = (state = {\r\n    currentOperand: \"0\",\r\n    lastOperand: \"\",\r\n    operation: \"\"\r\n}, action) => {\r\n    switch(action.type) {\r\n        case (ACTIONS.ADD_DIGIT):\r\n            if(state.currentOperand === \"0\" && action.digit !== \".\"){\r\n                return {\r\n                    ...state,\r\n                    currentOperand: action.digit\r\n                }\r\n            }\r\n            if(action.digit === '.' && state.currentOperand.includes('.')){\r\n                return state;\r\n            }\r\n            if(action.digit === '.' && state.currentOperand === \"\"){\r\n                return {\r\n                    ...state,\r\n                    currentOperand: \"0\" + action.digit\r\n                }\r\n            }\r\n            return {\r\n                ...state, \r\n                currentOperand: state.currentOperand + action.digit\r\n            }\r\n        case (ACTIONS.DELETE_DIGIT):\r\n            if(state.currentOperand === \"\"){\r\n                return state;\r\n            }\r\n            return {\r\n                ...state,\r\n                currentOperand: state.currentOperand.slice(0, -1)\r\n            }\r\n        case (ACTIONS.CHOOSE_OPERATION):\r\n            if(state.lastOperand === \"\" && state.currentOperand === \"\"){\r\n                return state;\r\n            }\r\n            if(state.lastOperand === \"\"){\r\n                return {\r\n                    ...state,\r\n                    lastOperand: state.currentOperand,\r\n                    operation: action.operation,\r\n                    currentOperand: \"\"\r\n                }\r\n            }\r\n            if(state.currentOperand === \"\"){\r\n                return {\r\n                    ...state,\r\n                    operation: action.operation\r\n                }\r\n            }\r\n            return { \r\n                ...state,\r\n                lastOperand: evalute(state),\r\n                operation: action.operation,\r\n                currentOperand: \"\"\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAE/B,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EACxB,IAAI;IAACC,CAAC;IAAEC,GAAG;IAAEC;EAAC,CAAC,GAAGH,KAAK;EACvBC,CAAC,GAAGG,UAAU,CAACH,CAAC,CAAC;EACjBE,CAAC,GAAGC,UAAU,CAACD,CAAC,CAAC;EACjB,IAAIE,GAAG,GAAG,EAAE;EACZ,QAAOH,GAAG;IACN,KAAK,GAAG;MACJG,GAAG,GAAGJ,CAAC,GAAGE,CAAC;IACf,KAAK,GAAG;MACJE,GAAG,GAAGJ,CAAC,GAAGE,CAAC;IACf,KAAK,GAAG;MACJE,GAAG,GAAGJ,CAAC,GAAGE,CAAC;IACf,KAAK,GAAG;MACJ,IAAIA,CAAC,KAAK,CAAC,EAAC;QACRE,GAAG,GAAG,CAAC;MACX;MACAA,GAAG,GAAGD,UAAU,CAACH,CAAC,GAAGE,CAAC,CAAC;EAC/B;EACA,OAAOE,GAAG,CAACC,QAAQ,CAAC,CAAC;AACzB,CAAC;AAED,MAAMC,OAAO,GAAGA,CAACP,KAAK,GAAG;EACrBQ,cAAc,EAAE,GAAG;EACnBC,WAAW,EAAE,EAAE;EACfC,SAAS,EAAE;AACf,CAAC,EAAEC,MAAM,KAAK;EACV,QAAOA,MAAM,CAACC,IAAI;IACd,KAAMd,OAAO,CAACe,SAAS;MACnB,IAAGb,KAAK,CAACQ,cAAc,KAAK,GAAG,IAAIG,MAAM,CAACG,KAAK,KAAK,GAAG,EAAC;QACpD,OAAO;UACH,GAAGd,KAAK;UACRQ,cAAc,EAAEG,MAAM,CAACG;QAC3B,CAAC;MACL;MACA,IAAGH,MAAM,CAACG,KAAK,KAAK,GAAG,IAAId,KAAK,CAACQ,cAAc,CAACO,QAAQ,CAAC,GAAG,CAAC,EAAC;QAC1D,OAAOf,KAAK;MAChB;MACA,IAAGW,MAAM,CAACG,KAAK,KAAK,GAAG,IAAId,KAAK,CAACQ,cAAc,KAAK,EAAE,EAAC;QACnD,OAAO;UACH,GAAGR,KAAK;UACRQ,cAAc,EAAE,GAAG,GAAGG,MAAM,CAACG;QACjC,CAAC;MACL;MACA,OAAO;QACH,GAAGd,KAAK;QACRQ,cAAc,EAAER,KAAK,CAACQ,cAAc,GAAGG,MAAM,CAACG;MAClD,CAAC;IACL,KAAMhB,OAAO,CAACkB,YAAY;MACtB,IAAGhB,KAAK,CAACQ,cAAc,KAAK,EAAE,EAAC;QAC3B,OAAOR,KAAK;MAChB;MACA,OAAO;QACH,GAAGA,KAAK;QACRQ,cAAc,EAAER,KAAK,CAACQ,cAAc,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MACpD,CAAC;IACL,KAAMnB,OAAO,CAACoB,gBAAgB;MAC1B,IAAGlB,KAAK,CAACS,WAAW,KAAK,EAAE,IAAIT,KAAK,CAACQ,cAAc,KAAK,EAAE,EAAC;QACvD,OAAOR,KAAK;MAChB;MACA,IAAGA,KAAK,CAACS,WAAW,KAAK,EAAE,EAAC;QACxB,OAAO;UACH,GAAGT,KAAK;UACRS,WAAW,EAAET,KAAK,CAACQ,cAAc;UACjCE,SAAS,EAAEC,MAAM,CAACD,SAAS;UAC3BF,cAAc,EAAE;QACpB,CAAC;MACL;MACA,IAAGR,KAAK,CAACQ,cAAc,KAAK,EAAE,EAAC;QAC3B,OAAO;UACH,GAAGR,KAAK;UACRU,SAAS,EAAEC,MAAM,CAACD;QACtB,CAAC;MACL;MACA,OAAO;QACH,GAAGV,KAAK;QACRS,WAAW,EAAEU,OAAO,CAACnB,KAAK,CAAC;QAC3BU,SAAS,EAAEC,MAAM,CAACD,SAAS;QAC3BF,cAAc,EAAE;MACpB,CAAC;IACL;MACI,OAAOR,KAAK;EACpB;AACJ,CAAC;AAED,eAAeO,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}